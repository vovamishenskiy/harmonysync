from flask import Flask, jsonify, request, redirect, url_for, session
from functools import wraps
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import os
import json
from datetime import datetime, timedelta
import pytz
import logging
from pymongo import MongoClient
from uuid import uuid4
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logging.getLogger('googleapiclient.discovery_cache').setLevel(logging.ERROR)

# –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ Google API
SCOPES = ['https://www.googleapis.com/auth/calendar']

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –°–∞—Ä–∞—Ç–æ–≤–∞
saratov_tz = pytz.timezone('Europe/Saratov')

def convert_to_saratov_time(dt_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –°–∞—Ä–∞—Ç–æ–≤–∞."""
    dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
    return dt.astimezone(saratov_tz)

class DateTimeEncoder(json.JSONEncoder):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ datetime –≤ JSON."""
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        return super(DateTimeEncoder, self).default(obj)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__, static_folder='static', static_url_path='')
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'default_secret_key')
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient(
    'mongodb://admin:LIv48nw6KyYbIyPX@localhost:27017/',
    authSource='admin'
)
db = client['harmonysync']
tasklists_collection = db['tasklists']  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
tasks_collection = db['tasks']  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_db():
    if not tasklists_collection.find_one({"title": "–ú–æ–∏ –∑–∞–¥–∞—á–∏"}):
        tasklists_collection.insert_one({"id": str(uuid4()), "title": "–ú–æ–∏ –∑–∞–¥–∞—á–∏"})
    if not tasklists_collection.find_one({"title": "üí∏"}):
        tasklists_collection.insert_one({"id": str(uuid4()), "title": "üí∏"})

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not get_credentials():
            logger.warning("User is not authenticated.")
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
def get_credentials():
    creds_data = session.get('credentials')
    return Credentials.from_authorized_user_info(creds_data) if creds_data else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏
def save_credentials(creds):
    session['credentials'] = json.loads(creds.to_json())

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
# @app.route('/')
# def index():
#     return app.send_static_file('index.html') if get_credentials() else app.send_static_file('login.html')

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google OAuth
@app.route('/login')
def login():
    flow = InstalledAppFlow.from_client_secrets_file(
        'credentials.json', SCOPES,
        redirect_uri=f"https://harmonysync.ru/oauth2callback"
    )
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        prompt='consent'
    )
    session['state'] = state
    return redirect(authorization_url)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ OAuth
@app.route('/oauth2callback')
def oauth2callback():
    state = request.args.get('state')
    if state != session.get('state'):
        logger.error("Mismatching state in OAuth callback")
        return "Mismatching state", 400
    flow = InstalledAppFlow.from_client_secrets_file(
        'credentials.json', SCOPES,
        state=state,
        redirect_uri=f"https://harmonysync.ru/oauth2callback"
    )
    try:
        flow.fetch_token(authorization_response=request.url)
        creds = flow.credentials
        save_credentials(creds)
        return redirect('/')
    except Exception as e:
        logger.error(f"Error processing OAuth callback: {e}")
        return f"Error processing OAuth callback: {e}", 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
@app.route('/api/logout')
def logout():
    try:
        session.clear()
        logger.info("Session cleared successfully.")
        return redirect(url_for('index'))
    except Exception as e:
        logger.error(f"Error during logout: {e}")
        return "An error occurred during logout.", 500
    
@app.route('/api/auth/check', methods=['GET'])
def check_auth():
    if get_credentials():
        return jsonify({'authenticated': True}), 200
    return jsonify({'authenticated': False}), 401

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@app.route('/api/calendar/events', methods=['GET'])
@login_required
def get_calendar_events():
    creds = get_credentials()
    service = build('calendar', 'v3', credentials=creds)
    now = saratov_tz.localize(datetime.now()).isoformat()
    future = saratov_tz.localize(datetime.now() + timedelta(days=30)).isoformat()
    try:
        events_result = service.events().list(
            calendarId='primary',
            timeMin=now,
            timeMax=future,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            end = event['end'].get('dateTime', event['end'].get('date'))
            if start and 'T' in start:
                event['start']['dateTime'] = convert_to_saratov_time(start).isoformat()
            elif start:
                event['start']['date'] = saratov_tz.localize(datetime.fromisoformat(start)).date().isoformat()
            if end and 'T' in end:
                event['end']['dateTime'] = convert_to_saratov_time(end).isoformat()
            elif end:
                event['end']['date'] = saratov_tz.localize(datetime.fromisoformat(end)).date().isoformat()
        logger.info(f"Fetched {len(events)} calendar events.")
        return json.dumps(events, cls=DateTimeEncoder), 200, {'Content-Type': 'application/json'}
    except Exception as e:
        logger.error(f"Error fetching calendar events: {e}")
        return jsonify({'error': 'Failed to fetch calendar events', 'details': str(e)}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
@app.route('/api/tasklists', methods=['GET'])
@login_required
def get_tasklists():
    tasklists = list(tasklists_collection.find({}, {'_id': 0}))
    return jsonify(tasklists), 200

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
@app.route('/api/tasks', methods=['GET'])
@login_required
def get_tasks():
    list_id = request.args.get('list_id')
    if not list_id:
        return jsonify({'error': 'Missing list_id parameter'}), 400
    tasks = list(tasks_collection.find({"list_id": list_id}, {'_id': 0}))
    return jsonify(tasks), 200

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@app.route('/api/tasks', methods=['POST'])
@login_required
def create_task():
    data = request.json
    title = data.get('title')
    due_date = data.get('due')  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-02-03")
    due_time = data.get('time')  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm"
    list_id = data.get('list_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ list_id
    if not list_id:
        return jsonify({'error': 'Missing list_id parameter'}), 400

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    due_datetime = None
    if due_date and due_time:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∏ –¥–∞—Ç–∞, –∏ –≤—Ä–µ–º—è
        due_datetime = datetime.strptime(f"{due_date} {due_time}", "%Y-%m-%d %H:%M")
        due_datetime = saratov_tz.localize(due_datetime)
    elif due_date:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞
        due_datetime = datetime.strptime(due_date, "%Y-%m-%d")
        due_datetime = saratov_tz.localize(due_datetime)
    elif due_time:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)
        today = datetime.now(saratov_tz).date()
        due_datetime = datetime.strptime(f"{today} {due_time}", "%Y-%m-%d %H:%M")
        due_datetime = saratov_tz.localize(due_datetime)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    task = {
        "id": str(uuid4()),
        "title": title,
        "due_date": due_date,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        "due_time": due_time,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω–æ
        "due": due_datetime.isoformat() if due_datetime else None,  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "status": "pending",
        "list_id": list_id,
        "created_at": datetime.now(saratov_tz).isoformat(),
        "updated_at": datetime.now(saratov_tz).isoformat()
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ MongoDB
    tasks_collection.insert_one(task)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
    response_data = {
        "id": task["id"],
        "title": task["title"],
        "due_date": task["due_date"],  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        "due_time": task["due_time"],  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        "due": task["due"],  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        "status": task["status"],
        "list_id": task["list_id"]
    }

    return jsonify({'message': 'Task created successfully', 'task': response_data}), 201

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@app.route('/api/tasks/<task_id>', methods=['DELETE'])
@login_required
def delete_task(task_id):
    result = tasks_collection.delete_one({"id": task_id})
    if result.deleted_count == 0:
        return jsonify({'error': 'Task not found'}), 404
    return jsonify({'message': 'Task deleted successfully'}), 204

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@app.route('/api/tasks/<task_id>', methods=['PUT'])
@login_required
def update_task(task_id):
    data = request.json
    title = data.get('title')
    due_date = data.get('due')  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-02-03")
    due_time = data.get('time')  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm"
    status = data.get('status')

    update_data = {}
    if title:
        update_data["title"] = title
    if status:
        update_data["status"] = status

    due_datetime = None
    if due_date and due_time:
        due_datetime = datetime.strptime(f"{due_date} {due_time}", "%Y-%m-%d %H:%M")
        due_datetime = saratov_tz.localize(due_datetime)
    elif due_date:
        due_datetime = datetime.strptime(due_date, "%Y-%m-%d")
        due_datetime = saratov_tz.localize(due_datetime)
    elif due_time:
        today = datetime.now(saratov_tz).date()
        due_datetime = datetime.strptime(f"{today} {due_time}", "%Y-%m-%d %H:%M")
        due_datetime = saratov_tz.localize(due_datetime)

    if due_datetime:
        update_data["due_date"] = due_date
        update_data["due_time"] = due_time
        update_data["due"] = due_datetime.isoformat()
        
    update_data["updated_at"] = datetime.now(saratov_tz).isoformat()

    result = tasks_collection.update_one({"id": task_id}, {"$set": update_data})
    if result.matched_count == 0:
        return jsonify({'error': 'Task not found'}), 404

    return jsonify({'message': 'Task updated successfully'}), 200

def archive_completed_tasks():
    while True:
        try:
            cutoff_date = datetime.now(saratov_tz) - timedelta(days=30)
            old_completed_tasks = list(tasks_collection.find({
                "status": "completed",
                "updated_at": {"$lt": cutoff_date.isoformat()}
            }, {'_id': 0}))

            if old_completed_tasks:
                archive_dir = "task_archive"
                os.makedirs(archive_dir, exist_ok=True)

                # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª
                archive_file = os.path.join(archive_dir, "archive.json")
                if os.path.exists(archive_file):
                    with open(archive_file, "r", encoding="utf-8") as f:
                        archived_tasks = json.load(f)
                else:
                    archived_tasks = []

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∞—Ä—Ö–∏–≤
                archived_tasks.extend(old_completed_tasks)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
                with open(archive_file, "w", encoding="utf-8") as f:
                    json.dump(archived_tasks, f, ensure_ascii=False, indent=4)

                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã
                tasks_collection.delete_many({
                    "status": "completed",
                    "updated_at": {"$lt": cutoff_date.isoformat()}
                })

                logger.info(f"Archived {len(old_completed_tasks)} completed tasks.")

            else:
                logger.info("No completed tasks to archive.")

        except Exception as e:
            logger.error(f"Error in archiving tasks: {e}")

        # –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        time.sleep(86400)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
thread = threading.Thread(target=archive_completed_tasks, daemon=True)
thread.start()

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@app.route('/api/completed_tasks_count', methods=['GET'])
@login_required
def get_completed_tasks_count():
    completed_tasks_count = tasks_collection.count_documents({"status": "completed"})
    return jsonify({'completed_tasks_count': completed_tasks_count}), 200


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    initialize_db()
    app.run(host='0.0.0.0', port=5000)